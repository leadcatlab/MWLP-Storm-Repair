* 3/2/22

 ** Need to try what we suspect the prior paper does
    - Suspected algorithm that they use
        @code
        k = num_agents
        n = num_nodes
        for i in range(n) {
            part[i % k].add(i)
        }

        Run heuristic (greedy / nn / other) on each partition
        @end

 ** Ideas for average MWLP
  *** Add to middle of list
    - This should be easy to implment since we can store all intermediate latencies
    - *ISSUE:* This requires that we already have an order of some sort for the graph
    - If adding node `4` to `0 -> 1 -> 2 -> 3 -> 5`:
    -- Calculate using `0 -> 1 -> 2 -> 4 -> 3 -> 5`
    - This should be quick

  *** Consider the sums of all possible weighted latencies over a partition
    - If we have `n = 3` nodes such as `{1, 2, 3}` we consider
        @code
        0 -> 1 -> 2 -> 3
        0 -> 1 -> 3 -> 2
        ...
        0 -> 3 -> 2 -> 1
        @end
        And then divide by n! = 3!
    - *TODO:* Determine if this leads to any quick calculations
  *** Give everything the same (average) weight and distance and calculate using this
    - Averages are easy to update, should be easy to work with
    
